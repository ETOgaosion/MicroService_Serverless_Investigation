{
  "_from": "gitbook-plugin-klipse",
  "_id": "gitbook-plugin-klipse@1.2.0",
  "_inBundle": false,
  "_integrity": "sha512-pvt5Oc4sT6TG2hTijyDXQrdZbpsWyeOrWnuq9Z6IVBOBQjg22d0cBg6t7E8+ND6SbeIJdYKRUhXXMl5Snl0+KA==",
  "_location": "/gitbook-plugin-klipse",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "gitbook-plugin-klipse",
    "fetchSpec": "latest",
    "name": "gitbook-plugin-klipse",
    "raw": "gitbook-plugin-klipse",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmmirror.com/gitbook-plugin-klipse/-/gitbook-plugin-klipse-1.2.0.tgz",
  "_shasum": "0ac712805977180a21c021549369c072b941779f",
  "_spec": "gitbook-plugin-klipse",
  "_where": "/Volumes/study/code/markdown/obsidian/MicroService_Serverless_Investigation",
  "author": "",
  "bugs": {
    "url": "https://github.com/brian-dawn/gitbook-plugin-klipse/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "A klipse plugin for gitbook",
  "devDependencies": {},
  "engines": {
    "gitbook": ">1.x.x"
  },
  "gitbook": {
    "properties": {
      "myConfigKey": {
        "default": "it's the default value",
        "description": "It defines my awesome config!",
        "type": "string"
      }
    }
  },
  "homepage": "https://github.com/brian-dawn/gitbook-plugin-klipse#readme",
  "license": "ISC",
  "main": "index.js",
  "name": "gitbook-plugin-klipse",
  "optionalDependencies": {},
  "readme": "# Introduction\n\nThis plugin allows you to embed klipse: https://github.com/viebel/klipse\nin gitbook projects.\n\nKlipse allows code snippets in your gitbooks to be live and interactive. The code is evaluated as you type or when you press `Ctrl-Enter`.\n\nTo enable this plugin add `klipse` to your `book.json` plugins.\n\nNow you can embed interactive code snippets (clojure, javascript, python, ruby, scheme and php) in your gitbooks.\n\nYou can read [the full interactive guide](https://book.klipse.tech/) for using klipse in a gitbook. The guide is itself a gitbook using the klipse plugin.\n\n# Clojure & ClojureScript\n\nFor clojure[script] code evaluation:\n\n<pre><code>\n&grave;&grave;&grave;eval-clojure\n(map inc [1 2 3])\n&grave;&grave;&grave;\n</code></pre>\n\nFor clojurescript code transpilation:\n\n<pre><code>\n&grave;&grave;&grave;transpile-cljs\n(map inc [1 2 3])\n&grave;&grave;&grave;\n</code></pre>\n\n# Javascript\n\n<pre><code>\n&grave;&grave;&grave;eval-js\n[1,2,3].map(function(x) { return x + 1;})\n&grave;&grave;&grave;\n</code></pre>\n\n# Python\n\n<pre><code>\n&grave;&grave;&grave;eval-python\nprint [x + 1 for x in range(10)]\n&grave;&grave;&grave;\n</code></pre>\n\n# Ruby\n<pre><code>\n&grave;&grave;&grave;eval-ruby\n[1,2]*10\n&grave;&grave;&grave;\n</code></pre>\n\n# Scheme \n\n<pre><code>\n&grave;&grave;&grave;eval-scheme\n(let ((x 23)\n      (y 42))\n  (+ x y))\n&grave;&grave;&grave;\n</code></pre>\n\n# PHP\n\n<pre><code>\n&grave;&grave;&grave;eval-php\n$var = [\"a\" => 1];\nvar_dump($var);\n&grave;&grave;&grave;\n</code></pre>\n\n# Using options\n\nYou can define snippet level configuration by using gitbook blocks instead of code fences. The first argument is always the language, followed by named arguments for all other configuration options. All option names are camelCased.\n\n## Clojure & ClojureScript\n\n```\n{% klipse \"eval-clojure\", loopMsec=\"1000\" %}\n(rand)\n{% endklipse %}\n```\n\n## Javascript\n\n```\n{% klipse \"eval-js\", loopMsec=\"1000\" %}\nnew Date()\n{% endklipse %}\n```",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/brian-dawn/gitbook-plugin-klipse.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "1.2.0"
}
