{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction 本项目为 Copyright © BlueSpace 2023 all right reserved，powered by GitbookLast Modification Time: 2023-03-17 19:48:53 "},"MicroService/":{"url":"MicroService/","title":"微服务","keywords":"","body":"Copyright © BlueSpace 2023 all right reserved，powered by GitbookLast Modification Time: 2023-03-17 19:43:22 "},"MicroService/Frameworks/":{"url":"MicroService/Frameworks/","title":"框架","keywords":"","body":"Copyright © BlueSpace 2023 all right reserved，powered by GitbookLast Modification Time: 2023-03-18 16:57:57 "},"MicroService/Techniques/":{"url":"MicroService/Techniques/","title":"技巧","keywords":"","body":"Copyright © BlueSpace 2023 all right reserved，powered by GitbookLast Modification Time: 2023-03-18 16:58:36 "},"MicroService/Techniques/ORM.html":{"url":"MicroService/Techniques/ORM.html","title":"ORM","keywords":"","body":"Copyright © BlueSpace 2023 all right reserved，powered by GitbookLast Modification Time: 2023-03-14 13:47:14 "},"MicroService/Techniques/Protobuf.html":{"url":"MicroService/Techniques/Protobuf.html","title":"Protobuf","keywords":"","body":"Copyright © BlueSpace 2023 all right reserved，powered by GitbookLast Modification Time: 2023-03-14 13:47:02 "},"MicroService/Techniques/gRPC.html":{"url":"MicroService/Techniques/gRPC.html","title":"gRPC","keywords":"","body":"Copyright © BlueSpace 2023 all right reserved，powered by GitbookLast Modification Time: 2023-03-14 13:46:55 "},"MicroService/Automatic/AutoMicro.html":{"url":"MicroService/Automatic/AutoMicro.html","title":"自动化拆分","keywords":"","body":" 自动化微服务拆分 microservice #clang 定位 为已经构建完成不希望改动范围大的单体应用提供简便的自动化拆分工具，对云计算领域并不熟悉的单体应用开发者能够轻松使用。 本项目现阶段针对使用C++面向对象开发的单体应用改造，面向Java等其余面向对象语言的单体应用可能使用其他的技术路线有更好的效果。 因开发时间有限，本项目采取简化问题的处理方式，使用最易的实现方式。 形式 项目目录架构 为简便实现，本项目主要采用Python，遵照Python项目的结构。 config: 项目面向配置，包含微服务拆分的指导配置 .clang-format: 采用Google Code Style，将用户原C++工程格式重构，利用这种方式省去利用clang编译器重构项目的必要性 architecture: 本项目将设计新的语言或者使用json等描述文件刻画用户的微服务组织架构图，项目运行将以此作为重要参考 tree_module_map: 表明文件树中文件夹所代表的模块名，模块都应在微服务architecture中得到体现 tutorial.md: 该教程为组织架构图的描述语言介绍 micro_service_app: 生成的微服务程序 raw_app: 用户源代码，需要用户在源码中添加编译制导指令#pragma ms来指导本项目生成分布式共享数据库 tutorial.md: 微服务编译制导指令的格式与介绍 source_libs: 包含已写好可直接搬运使用的微服务源码 src: 项目源代码主目录 requirements.txt: 依赖包安装 setup.py: 项目安装 微服务项目组织架构图描述语言 欲描述一个微服务项目的组织架构图，需要明确相关的定义： API Server: 作为用户使用微服务的接口，负责与单用户流程的主节点通信 Node: 以docker为单位的节点，为调度和微服务基本单位 Components: Node由组件Components构成，组件有三种： inNode为不与外界交互的逻辑模块，只对内提供服务 Server为向外界提供服务的模块 Client为请求外界服务的模块 Functions: Node有特定功能，后两者可与前三者组合 File为文件处理节点 Calculate为计算节点 Passer为中间数据处理、传递节点 Master可以是全局主节点，也能够是特定任务的局部主节点，全局主节点仅能有一个 Child为承担并行任务的子节点 Layer: 当若干Node运行不存在冲突时，可并行运行，则可在同一Layer RequestEdge: 当存在一个Node的Client Component对另一个Node的Server Component有动作请求，则使用RequestEdge表明这种关系。不需要ResponseEdge，因为请求必被允许，可以理解为若两Node之间存在有向边Edge，则方向代表请求。RequestEdge落到Components 在明确上述定义之后便可以书写组织架构图了。 yaml json 项目树-模块映射 需要将architecture中出现的模块名与项目树中的文件夹对应映射。 一个常见使用CMake构建的C++项目目录如下： bin: 二进制目标所在目录 cmake: 部分库的编译指导 src: 项目主要代码，内部由module组成，module可由无限级的submodule组成 thirdparty: 项目使用的第三方库 因此在src目录下，需要能够找到 编译制导指令格式 本项目使用编译制导指令对源代码进行解读和改造，针对C++面向对象的程序，存在一些单体应用的开发建议，遵循此开发建议可使用本工具进行快速开发，否则需要人工进行一些程序正确性检查。 Copyright © BlueSpace 2023 all right reserved，powered by GitbookLast Modification Time: 2023-03-18 16:55:45 "},"Distributed/":{"url":"Distributed/","title":"分布式","keywords":"","body":"Copyright © BlueSpace 2023 all right reserved，powered by GitbookLast Modification Time: 2023-03-17 19:43:09 "},"Distributed/DSM/":{"url":"Distributed/DSM/","title":"分布式共享内存","keywords":"","body":"Copyright © BlueSpace 2023 all right reserved，powered by GitbookLast Modification Time: 2023-03-18 17:04:00 "},"Distributed/Frameworks/":{"url":"Distributed/Frameworks/","title":"框架","keywords":"","body":"Copyright © BlueSpace 2023 all right reserved，powered by GitbookLast Modification Time: 2023-03-18 17:04:07 "},"Distributed/Parallel/":{"url":"Distributed/Parallel/","title":"分布式并行","keywords":"","body":"Copyright © BlueSpace 2023 all right reserved，powered by GitbookLast Modification Time: 2023-03-18 17:04:16 "},"Serverless/":{"url":"Serverless/","title":"Serverless","keywords":"","body":"Copyright © BlueSpace 2023 all right reserved，powered by GitbookLast Modification Time: 2023-03-17 19:46:11 "},"Serverless/Frameworks/":{"url":"Serverless/Frameworks/","title":"框架","keywords":"","body":"Copyright © BlueSpace 2023 all right reserved，powered by GitbookLast Modification Time: 2023-03-18 17:03:44 "},"Serverless/Frameworks/Knative.html":{"url":"Serverless/Frameworks/Knative.html","title":"框架","keywords":"","body":"Copyright © BlueSpace 2023 all right reserved，powered by GitbookLast Modification Time: 2023-03-14 13:43:59 "},"Serverless/Frameworks/Kubekess.html":{"url":"Serverless/Frameworks/Kubekess.html","title":"框架","keywords":"","body":"Copyright © BlueSpace 2023 all right reserved，powered by GitbookLast Modification Time: 2023-03-14 13:44:41 "},"Serverless/Frameworks/Lambda.html":{"url":"Serverless/Frameworks/Lambda.html","title":"框架","keywords":"","body":"Copyright © BlueSpace 2023 all right reserved，powered by GitbookLast Modification Time: 2023-03-14 13:45:09 "},"Serverless/Frameworks/OpenFass.html":{"url":"Serverless/Frameworks/OpenFass.html","title":"框架","keywords":"","body":"Copyright © BlueSpace 2023 all right reserved，powered by GitbookLast Modification Time: 2023-03-14 13:43:37 "},"Serverless/Frameworks/OpenWisk.html":{"url":"Serverless/Frameworks/OpenWisk.html","title":"框架","keywords":"","body":"Copyright © BlueSpace 2023 all right reserved，powered by GitbookLast Modification Time: 2023-03-14 13:44:11 "},"Serverless/Frameworks/Ray.html":{"url":"Serverless/Frameworks/Ray.html","title":"框架","keywords":"","body":"Copyright © BlueSpace 2023 all right reserved，powered by GitbookLast Modification Time: 2023-03-14 13:43:11 "}}